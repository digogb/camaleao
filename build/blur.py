#!/usr/bin/env python3
"""
Script para gerar execut√°vel do BlurCam & Voice Controller
Inclui todos os arquivos necess√°rios
"""

import subprocess
import sys
import os
from pathlib import Path

def install_pyinstaller():
    """Instala o PyInstaller se n√£o estiver instalado"""
    try:
        import PyInstaller
        print("‚úì PyInstaller j√° est√° instalado")
        return True
    except ImportError:
        print("PyInstaller n√£o encontrado. Instalando...")
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
            print("‚úì PyInstaller instalado com sucesso!")
            return True
        except subprocess.CalledProcessError:
            print("‚úó Erro ao instalar PyInstaller")
            return False

def check_required_files():
    """Verifica se todos os arquivos necess√°rios existem"""
    print("\nüîç Verificando arquivos necess√°rios...")
    print("=" * 60)
    
    required_files = {
        "blur_voice.py": "C√≥digo principal",
        "BlurCamOptDbg.exe": "Execut√°vel de blur de v√≠deo",
        "ffplay.exe": "Execut√°vel de √°udio FFmpeg"
    }
    
    optional_files = {
        "ffmpeg.exe": "FFmpeg completo (opcional)",
        "icon.ico": "√çcone personalizado (opcional)"
    }
    
    missing_required = []
    
    # Verifica arquivos obrigat√≥rios
    for file, description in required_files.items():
        if os.path.exists(file):
            print(f"‚úì {file} - {description}")
        else:
            print(f"‚úó {file} - {description} [FALTANDO]")
            missing_required.append(file)
    
    # Verifica arquivos opcionais
    print("\nArquivos opcionais:")
    for file, description in optional_files.items():
        if os.path.exists(file):
            print(f"‚úì {file} - {description}")
        else:
            print(f"‚óã {file} - {description} [N√£o encontrado]")
    
    if missing_required:
        print("\n‚ùå ERRO: Arquivos obrigat√≥rios faltando!")
        print("\nArquivos que precisam estar na pasta:")
        for file in missing_required:
            print(f"  - {file}")
        
        if "ffplay.exe" in missing_required:
            print("\nüí° Para obter o ffplay.exe:")
            print("   1. Acesse: https://www.gyan.dev/ffmpeg/builds/")
            print("   2. Baixe: ffmpeg-release-essentials.zip")
            print("   3. Extraia e copie ffplay.exe da pasta bin/")
        
        return False
    
    print("\n‚úÖ Todos os arquivos obrigat√≥rios encontrados!")
    return True

def build_executable():
    """Gera o execut√°vel usando PyInstaller"""
    
    print("\nüöÄ Iniciando processo de build...")
    print("=" * 60)
    
    # Comando PyInstaller
    cmd = [
        "pyinstaller",
        "--onefile",                      # Arquivo √∫nico
        "--windowed",                     # Sem console
        "--noconsole",                    # For√ßa sem console
        "--name=BlurCamVoiceController",  # Nome do execut√°vel
        "--clean",                        # Limpa cache
        "--optimize=2",                   # Otimiza√ß√£o m√°xima
    ]
    
    # Adiciona √≠cone se existir
    if os.path.exists("icon.ico"):
        cmd.extend(["--icon=icon.ico"])
        print("‚úì √çcone personalizado ser√° inclu√≠do")
    
    # Adiciona arquivos de dados
    data_files = []
    
    if os.path.exists("BlurCamOptDbg.exe"):
        data_files.append("BlurCamOptDbg.exe")
    
    if os.path.exists("ffplay.exe"):
        data_files.append("ffplay.exe")
    
    if os.path.exists("ffmpeg.exe"):
        data_files.append("ffmpeg.exe")
    
    # Adiciona cada arquivo de dados
    for file in data_files:
        cmd.extend(["--add-data", f"{file};."])
        print(f"‚úì {file} ser√° inclu√≠do no execut√°vel")
    
    # Adiciona o arquivo Python principal
    cmd.append("blur_voice.py")
    
    print("\nüì¶ Comando PyInstaller:")
    print(" ".join(cmd))
    print("=" * 60)
    
    try:
        # Executa o PyInstaller
        print("\n‚è≥ Compilando... (isso pode demorar alguns minutos)")
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("\n‚úÖ BUILD CONCLU√çDO COM SUCESSO!")
            print("=" * 60)
            
            # Localiza o execut√°vel
            exe_path = Path("dist/BlurCamVoiceController.exe")
            if exe_path.exists():
                size_mb = exe_path.stat().st_size / 1024 / 1024
                print(f"\nüìÅ Execut√°vel criado:")
                print(f"   Local: {exe_path.absolute()}")
                print(f"   Tamanho: {size_mb:.1f} MB")
                
                print("\nüìã INSTRU√á√ïES DE USO:")
                print("   1. O execut√°vel est√° em: dist\\BlurCamVoiceController.exe")
                print("   2. Todos os arquivos necess√°rios j√° est√£o inclu√≠dos")
                print("   3. Copie o execut√°vel para onde quiser")
                print("   4. Execute e aproveite!")
                
                print("\nüí° RECURSOS INCLU√çDOS:")
                print("   ‚úì Blur de v√≠deo (BlurCam)")
                print("   ‚úì Modificador de voz (FFplay)")
                print("   ‚úì Detec√ß√£o autom√°tica de dispositivos")
                print("   ‚úì Interface gr√°fica completa")
                print("   ‚úì Log de atividades")
                
                return True
            else:
                print("‚úó Execut√°vel n√£o encontrado em dist/")
                return False
        else:
            print("\n‚úó ERRO NO BUILD:")
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"\n‚úó Erro ao executar PyInstaller: {e}")
        return False

def clean_build_files():
    """Limpa arquivos tempor√°rios do build"""
    import shutil
    
    print("\nüßπ Limpando arquivos tempor√°rios...")
    
    folders_to_clean = ["build", "__pycache__"]
    
    for folder in folders_to_clean:
        if os.path.exists(folder):
            try:
                shutil.rmtree(folder)
                print(f"‚úì Removido: {folder}/")
            except Exception as e:
                print(f"‚ö†Ô∏è  N√£o foi poss√≠vel remover {folder}/: {e}")
    
    # Remove arquivos .spec
    for spec_file in Path(".").glob("*.spec"):
        try:
            spec_file.unlink()
            print(f"‚úì Removido: {spec_file}")
        except Exception as e:
            print(f"‚ö†Ô∏è  N√£o foi poss√≠vel remover {spec_file}: {e}")

def create_readme():
    """Cria um README para distribui√ß√£o"""
    readme_content = """

# Camale√£o

## üéØ O que √©?

Este programa permite:
- üé• Borrar completamente sua c√¢mera (blur de v√≠deo)
- üé§ Modificar sua voz em tempo real
- ‚öôÔ∏è Controlar tudo em uma interface simples

## üöÄ Como usar?

1. Execute o arquivo Camaleao.exe
2. Em configura√ß√µes, selecione seu microfone na lista
3. Clique em "LIGAR TUDO" ou ligue cada recurso individualmente
4. Entre na sua videochamada
5. Quando terminar, clique em "DESLIGAR TUDO"

## üîß Compatibilidade

Funciona com:
- Zoom
- Microsoft Teams
- Google Meet
- Discord
- Skype
- Qualquer app que use DirectShow

## üìã Requisitos

- Windows 7 ou superior
- C√¢mera e microfone conectados
- Driver UnityCapture instalado na m√°quina  
- Virtual Audio Cable (VB-Audio) instalado na m√°quina

## üí° Dicas

- Teste antes de usar em reuni√µes importantes
- Configure seu app de videochamada para usar "Unity Video Capture" como c√¢mera
- Configure seu app de videochamada para usar "Cable Output (VB-Audio Virtual Cable)" como microfone
- Configure seu dispositivo de sa√≠da do windows para usar "Cable Input (VB-Audio Virtual Cable)" como sa√≠da
- O microfone configurado no app ser√° automaticamente modificado

## üîí Privacidade

- Toda modifica√ß√£o acontece localmente no seu computador
- Nenhum dado √© enviado para internet
- Seu v√≠deo fica completamente borrado
- Sua voz √© modificada em tempo real

Aproveite! üéâ
"""
    
    readme_path = Path("dist/README.txt")
    if readme_path.parent.exists():
        try:
            with open(readme_path, 'w', encoding='utf-8') as f:
                f.write(readme_content)
            print(f"‚úì README criado em: {readme_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è  N√£o foi poss√≠vel criar README: {e}")

def main():
    """Fun√ß√£o principal"""
    print("=" * 60)
    print("üõ†Ô∏è  GERADOR DE EXECUT√ÅVEL")
    print("    BlurCam & Voice Controller")
    print("=" * 60)
    
    # Passo 1: Instalar PyInstaller
    if not install_pyinstaller():
        print("\nN√£o foi poss√≠vel instalar o PyInstaller.")
        print("Tente instalar manualmente: pip install pyinstaller")
        input("\nPressione Enter para sair...")
        return
    
    # Passo 2: Verificar arquivos
    if not check_required_files():
        print("\n‚ùå Build cancelado - arquivos faltando")
        input("\nPressione Enter para sair...")
        return
    
    input("\n‚úÖ Tudo pronto! Pressione Enter para iniciar o build...")
    
    # Passo 3: Gerar execut√°vel
    success = build_executable()
    
    if success:
        # Passo 4: Limpar arquivos tempor√°rios
        clean_build_files()
        
        # Passo 5: Criar README
        create_readme()
        
        print("\n" + "=" * 60)
        print("üéâ PROCESSO CONCLU√çDO COM SUCESSO!")
        print("=" * 60)
        print("\nüì¶ Seu execut√°vel est√° pronto para distribui√ß√£o!")
        print("üìÅ Localize em: dist\\BlurCamVoiceController.exe")
        
    else:
        print("\n‚ùå Build falhou. Verifique os erros acima.")
    
    input("\nPressione Enter para sair...")

if __name__ == "__main__":
    main()